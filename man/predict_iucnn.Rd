% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_iucnn.R
\name{predict_iucnn}
\alias{predict_iucnn}
\title{Predict IUCN Categories from Features}
\usage{
predict_iucnn(
  x,
  model,
  target_acc = 0,
  model_dir = "iuc_nn_model",
  verbose = 0,
  return_raw = FALSE
)
}
\arguments{
\item{x}{a data.set, containing a column "species" with the species names, and
subsequent columns with different features, in the same order as used for \code{\link{train_iucnn}}}

\item{model}{the information on the NN model returned by \code{\link{train_iucnn}}}

\item{model_dir}{a character string. The folder with the trained IUCNN
model as generated by \code{\link{train_iucnn}}.}

\item{verbose}{logical, if TRUE generate additional output.}

\item{return_raw}{logical. Should the probabilities for the labels be returned? Default is FALSE.
Note that the probabilities are the direct output of the SoftMax function in the output layer
of the neural network and might be an unreliable measure of statistical support for
the result of the classification (e.g. https://arxiv.org/abs/2005.04987).}
}
\value{
a vector with the predicted labels for the input species.
}
\description{
Uses a model generated with \code{\link{train_iucnn}} to predict the IUCN status of
Not Evaluated or Data Deficient species based on features, for instance generated
from species occurrence records with \code{\link{ft_geo}}, \code{\link{ft_clim}}, and \code{\link{ft_biom}}.
The same features in the same order must be used for training and fitting.
}
\note{
See \code{vignette("Approximate_IUCN_Red_List_assessments_with_IUCNN")} for a
tutorial on how to run IUCNN.
}
\examples{
\dontrun{
dat <- data.frame(species = c("A", "B"),
               decimallongitude = runif (200,-5,5),
               decimallatitude = runif (200,-5,5))
labels <- data.frame(species = c("A","B"),
                    labels = c(1,0))

train_feat <- ft_geo(dat)

not_eval <- data.frame(species = c("A", "B"),
               decimallongitude = runif (200,-5,5),
               decimallatitude = runif (200,-5,5))
predict_feat <- ft_geo(not_eval)
train_iucnn(x = train_feat,
          labels = labels)
predict_iucnn(x = predict_feat,
            model_dir = "iuc_nn_model")
}


}
