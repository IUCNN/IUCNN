% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iucnn_cnn_train.R
\name{iucnn_cnn_train}
\alias{iucnn_cnn_train}
\title{Train a CNN model}
\usage{
iucnn_cnn_train(
  x,
  lab,
  path_to_output = "iuc_nn_model",
  cv_fold = 1,
  test_fraction = 0.2,
  no_validation = FALSE,
  seed = 1234,
  max_epochs = 100,
  patience = 20,
  randomize_instances = TRUE,
  balance_classes = TRUE,
  dropout_rate = 0,
  mc_dropout_reps = 100,
  optimize_for = "accuracy",
  pooling_strategy = "average",
  label_res = "detail",
  save_model = TRUE,
  overwrite = FALSE,
  verbose = 0
)
}
\arguments{
\item{x}{a list of matrices containing the occurrence counts across a spatial
grid for a set of species.}

\item{lab}{an object of the class iucnn_labels, as generated by
\code{\link{iucnn_prepare_labels}} containing the labels for all species.}

\item{path_to_output}{character string. The path to the location
where the IUCNN model shall be saved}

\item{cv_fold}{integer (default=1). When setting cv_fold > 1,
\code{iucnn_cnn_train} will perform k-fold cross-validation. In this case, the
provided setting for test_fraction will be ignored, as the test
size of each CV-fold is determined by the specified number provided here.}

\item{test_fraction}{numeric. The fraction of the input data used as
test set.}

\item{no_validation}{logical (default=FALSE). If set to TRUE, training will
continue until the specified max_epochs value, instead of automatically
determining and stopping at the best epoch.}

\item{seed}{integer. Set a starting seed for reproducibility.}

\item{max_epochs}{integer. The maximum number of epochs.}

\item{patience}{integer. Number of epochs with no improvement
after which training will be stopped.}

\item{randomize_instances}{logical (default=TRUE). When set to TRUE (default)
the instances will be shuffled before training (recommended).}

\item{balance_classes}{logical (default=FALSE). If set to TRUE,
\code{iucnn_cnn_train} will perform supersampling of the training instances to
account for uneven class distribution in the training data.}

\item{dropout_rate}{numeric. This will randomly turn off the specified
fraction of nodes of the neural network during each epoch of training
making the NN more stable and less reliant on individual nodes/weights, which
can prevent over-fitting (only available for modes nn-class and nn-reg).
See mc_dropout setting explained below if dropout shall also be applied to the
predictions. For models trained with a dropout fraction > 0, the predictions
(including the validation accuracy)
will reflect the stochasticity introduced by the dropout method (MC dropout
predictions). This is e.g. required when wanting to predict with a specified
accuracy threshold (see target_acc option in
\code{\link{iucnn_predict_status}}).}

\item{mc_dropout_reps}{integer. The number of MC iterations to run when
predicting validation accuracy and calculating the accuracy-threshold
table required for making predictions with an accuracy threshold.
The default of 100 is usually sufficient, larger values will lead to longer
computation times, particularly during model testing with cross-validation.}

\item{optimize_for}{string. Default is "accuracy", which will train the model
until optimal validation set accuracy is reached. Set to "loss" if you want
to optimize for minimum validation loss instead.}

\item{pooling_strategy}{string. Pooling strategy after first convolutional
layer. Choose between  "average" (default) and "max".}

\item{label_res}{character. Resolution of the input labels. Either "detail" or "broad".}

\item{save_model}{logical. If TRUE the model is saved to disk.}

\item{overwrite}{logical. If TRUE existing models are
overwritten. Default is set to FALSE.}

\item{verbose}{Default 0, set to 1 for \code{iucnn_cnn_train} to print
additional info to the screen while training.}
}
\value{
outputs an \code{iucnn_model} object which can be used in
\code{\link{iucnn_predict_status}} for predicting the conservation status
of not evaluated species.
}
\description{
Trains an CNN model based on a list of matrices with occurrence counts for a
set of species,
generated by \code{\link{iucnn_cnn_features}},
and the corresponding IUCN classes formatted as a iucnn_labels object
with \code{\link{iucnn_prepare_labels}}. Note
that taxa for which information is only present in one
of the two input objects will be removed from further processing.
}
\note{
See \code{vignette("Approximate_IUCN_Red_List_assessments_with_IUCNN")}
for a tutorial on how to run IUCNN.
}
\examples{
\dontrun{
trained_model <- iucnn_cnn_train(cnn_training_features,
                                cnn_labels,
                                cv_fold=5,
                                overwrite = TRUE,
                                dropout=0.1)
summary(trained_model)
}

}
\keyword{Training}
