% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_iucnn.R
\name{train_iucnn}
\alias{train_iucnn}
\title{Train an IUCNN Model}
\usage{
train_iucnn(
  x,
  labels,
  path_to_output = "",
  model_name = "iuc_nn_model",
  validation_split = 0.1,
  test_fraction = 0.1,
  seed = 1234,
  verbose = 0,
  max_epochs = 1000,
  n_layers = c(60, 60, 20),
  use_bias = 1,
  act_f = "relu",
  patience = 500
)
}
\arguments{
\item{x}{a data.set, containing a column "species" with the species names, and
subsequent columns with different features, in the same order as used for \code{\link{predict_iucnn}}.}

\item{labels}{a data.frame with two columns, first "species" with the species name,
second "labels with the labels (i.e. IUCN categories).}

\item{path_to_output}{character string. The path to the location
where the IUCNN model shall be saved}

\item{model_name}{character string. The name of the model.}

\item{validation_split}{numeric. The fraction of the input data used for validation.}

\item{test_fraction}{numeric. The fraction of the input data used as test data.}

\item{seed}{specify the python seed.}

\item{max_epochs}{integer. The maximum number of epochs.}

\item{n_layers}{numeric vector with length three. The number of layers of the neural network.}

\item{use_bias}{integer (1/0). Should bias be used}

\item{act_f}{character string. The act-f value}

\item{patience}{integer. The patience value.}
}
\value{
a folder in the working directory (or as specified with path_to_output) with the trained model,
for use by \code{\link{predict_iucnn}}.
}
\description{
Trains an IUCNN model based on a data,frame of features,
for instance generated by \code{\link{geo_features}}, |link{clim_features}, and \code{\link{biome_features}},
and a dataset of labels, (i.e. IUCNN classes) for each species.
}
\note{
See \code{vignette("Approximate_IUCN_Red_List_assessments_with_IUCNN")} for a
tutorial on how to run IUCNN.
}
\examples{
\dontrun{
dat <- data.frame(species = c("A", "B")
                decimallongitude = runif (200,-5,5),
                decimallatitude = runif (200,-5,5))
labels <- c(1,0)

train_feat <- geo_features(dat)

not_eval <- data.frame(species = c(A", "B")
                decimallongitude = runif (200,-5,5),
                decimallatitude = runif (200,-5,5))

predict_feat <- geo_features(not_eval)

train_iucnn(x = train_feat,
           label = labels)


predict_iucnn(x = predict_feat,
             model_dir = iuc_nn_model")
}


}
\keyword{Prediction}
